/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_SAFER-FFI-TOKENIZERS__
#define __RUST_SAFER-FFI-TOKENIZERS__

#ifdef __cplusplus
extern "C" {
#endif

typedef struct FFITokenizer FFITokenizer_t;

FFITokenizer_t * tokenizer_from_pretrained (
    char const * ffi_identifier);


#include <stdbool.h>


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    int64_t * ptr;

    size_t len;

    size_t cap;

} Vec_int64_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    char * * ptr;

    size_t len;

    size_t cap;

} Vec_char_ptr_t;

typedef struct {

    Vec_int64_t ids;

    Vec_int64_t type_ids;

    Vec_char_ptr_t tokens;

    Vec_int64_t words;

} FFIEncoding_t;

FFIEncoding_t * encode_from_str (
    FFITokenizer_t const * it,
    char const * ffi_input,
    bool add_special_tokens);

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    char const * * ptr;

    size_t len;

    size_t cap;

} Vec_char_const_ptr_t;

void encode_batch2 (
    FFITokenizer_t const * it,
    Vec_char_const_ptr_t const * ffi_input,
    bool add_special_tokens);

void tokenizer_drop (
    FFITokenizer_t * ptr);

void encoding_drop (
    FFIEncoding_t * ptr);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_SAFER-FFI-TOKENIZERS__ */
